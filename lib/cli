#!/usr/bin/env node
"use strict";var Q=require("dns");var s="hyperlight",F="0.1",m="hyperlight.json";var r={Reset:"\x1B[0m",FgRed:"\x1B[31m",FgGreen:"\x1B[32m",FgYellow:"\x1B[33m",FgMagenta:"\x1B[35m",FgCyan:"\x1B[36m",FgGray:"\x1B[90m",BgRed:"\x1B[41m",BgGreen:"\x1B[42m",BgYellow:"\x1B[43m",BgMagenta:"\x1B[45m",BgCyan:"\x1B[46m",BgGray:"\x1B[100m"};var j=require("readline");function g(e){return new Promise(n=>{let t=(0,j.createInterface)({input:process.stdin,output:process.stdout});t.question(`${r.FgGreen}?${r.Reset} ${e} ${r.FgCyan}`,i=>{t.close(),process.stdout.write(r.Reset),n(i)})})}var S=["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"];function ee(){process.stdout.write("\x1B[?25l")}function te(){process.stdout.write("\x1B[?25h")}function l(e=""){let n=!0,t=0,i=()=>{n&&(process.stdout.clearLine(-1),process.stdout.cursorTo(0),process.stdout.write(`${r.FgCyan}${S[t]}${r.Reset} ${e}`),t=(t+1)%S.length,setTimeout(i,100))};return ee(),i(),(a,u)=>{n=!1,process.stdout.clearLine(-1),process.stdout.cursorTo(0),te(),process.stdout.write(`${a?`${r.FgGreen}\u2714`:`${r.FgRed}\u2716\uFE0F`}${r.Reset} ${e} ${u}
`)}}function o(e){console.log(`  ${e}`)}function c(e){console.log(`  \u2022 ${e}`)}async function w(e){try{let t=await(await fetch(`${e}?json`)).json();if(!t.schemaPath||typeof t.schemaPath!="string"||!t.rpcPath||typeof t.rpcPath!="string")return;let a=await(await fetch(t.schemaPath)).json();return Array.isArray(a)?{schema:a,rpcPath:t.rpcPath}:void 0}catch{return}}function x(){c("Make sure you entered a valid URL, beginning with http:// or https://"),c("If you're running locally, make sure the service is up"),c("Check your configuration: Make sure your service is not in dev mode, or hiding its ping / schema endpoints"),c("Make sure the URL you entered is the ping URL for your service -- you should be able to go there and see the welcome message in your browser"),c("If you changed your ping URL in your configuration, make sure you're using the one that you specified"),c("If your server is remote, make sure your computer has an internet connection"),o("")}var p=require("fs"),A=require("path");function v(){return(0,A.join)(process.cwd(),m)}function G(){let e=v();if(!(0,p.existsSync)(e))return{clients:[]};let n=(0,p.readFileSync)(e).toString(),t=JSON.parse(n);if("clients"in t&&!Array.isArray(t.clients)||t.clients.some(i=>!i||typeof i!="object"||!("url"in i)||!("out"in i)||typeof i.url!="string"||typeof i.out!="string"))throw new Error(`Malformed clients array in ${m}`);return{clients:t.clients??[]}}function N(e){(0,p.writeFileSync)(v(),JSON.stringify(e,null,2))}async function T(e,n){let t=n??"",i=!!n;for(;;){i||(t=await g("Enter the address of the server to generate against (e.g. http://localhost:3000): "),t===""&&(t="http://localhost:3000"));let y=l("Checking your server...");if(await w(t)){y(!0,"done!");break}y(!1,"failed"),x(),i&&(o(`${r.FgRed}The URL you entered in the command-line arguments didn't work${r.Reset}, but you can try another one now.`),o(""),i=!1)}let a=await g("Enter the path where the output will be generated (e.g. src/client.generated.ts): ");a===""&&(a="src/client.generated.ts");let u={...e,clients:[...e.clients,{url:t,out:a}]};return N(u),o(""),o(`${r.FgGreen}Config saved!${r.Reset}`),o(`Run ${r.FgMagenta}npx hyperlight generate${r.Reset} to run codegen against your newly configured client`),u}var W=require("fs"),C=require("path");var E=require("fs");function L(e){(0,E.mkdirSync)(e)}var d=require("child_process"),P=require("fs"),I=require("path");function M(e,n){let t=(0,d.execSync)("/usr/bin/id -F").toString().trim();(0,P.writeFileSync)((0,I.join)(e,"package.json"),JSON.stringify({name:n,version:"0.1.0",author:t,license:"UNLICENSED",main:"./build/index.js",scripts:{prepare:"ts-patch install -s",build:`tsc && esbuild --bundle ./build-tmp --minify --platform=node --external:${s} --outfile=build/index.js && rm -rf ./build-tmp`,start:"node ./build/index.js"}},null,2)),(0,d.spawnSync)(`yarn --cwd ${e} add ${s}`,{shell:!0}),(0,d.spawnSync)(`yarn --cwd ${e} add --dev ts-patch esbuild`,{shell:!0})}var $=require("child_process"),k=require("fs"),O=require("path");function B(e){(0,k.writeFileSync)((0,O.join)(e,".gitignore"),[".DS_Store","Thumbs.DB","","node_modules","","build","*.generated",""].join(`
`)),(0,$.execSync)(`git init ${e}`),(0,$.execSync)(`git -C ${e} add .`),(0,$.execSync)(`git -C ${e} commit --all --message="Initial commit"`)}var U=require("fs"),_=require("path");function Y(e){(0,U.writeFileSync)((0,_.join)(e,"tsconfig.json"),JSON.stringify({compilerOptions:{strict:!0,lib:["ESNext"],rootDir:"src",outDir:"build-tmp",plugins:[{transform:`${s}/lib/patch`}],module:"NodeNext",skipLibCheck:!0,esModuleInterop:!0}},null,2))}var D=require("fs"),J=require("path");function H(e){(0,D.writeFileSync)((0,J.join)(e,m),JSON.stringify({environment:"node"},null,2))}var b=require("fs"),R=require("path");function V(e){let n=(0,R.join)(e,"src");(0,b.mkdirSync)(n),(0,b.writeFileSync)((0,R.join)(n,"index.ts"),re)}var re=`import { init } from "${s}";

/** @endpoint */
export function hello() {
  return "Hello, world!";
}

init({ devMode: true, port: 3000 });
`;async function q(e){o(`${r.FgMagenta}Thanks for choosing ${s}!${r.Reset}`),o(""),o("We'll create a new folder for your project in the current directory."),o("");let n=e||await ne();o("");let t=l("Hang tight..."),i=(0,C.join)(process.cwd(),n);L(i),M(i,n),Y(i),H(i),V(i),B(i),t(!0,"done!"),o(""),o(`${r.FgGreen}Your project is ready at:${r.Reset} ${i}`),o(`Run ${r.FgMagenta}yarn build${r.Reset} to build your project, and ${r.FgMagenta}yarn start${r.Reset} to start it`),o(""),o(`Once your server is all up and running, you can run ${r.FgMagenta}npx hyperlight add-client${r.Reset} in your client project to run codegen against it`)}async function ne(){for(;;){let e=await g("What do you want to call it?");if(!(0,W.existsSync)((0,C.join)(process.cwd(),e)))return e;o(`${r.FgYellow}An item with that name already exists here.${r.Reset} Please try something else`)}}var z=require("fs");function f(e){switch(e.type){case"null":return"null";case"undefined":return"undefined";case"void":return"void";case"numberLiteral":case"stringLiteral":case"booleanLiteral":return JSON.stringify(e.value);case"number":return"number";case"boolean":return"boolean";case"string":return"string";case"union":return`(${e.types.map(n=>f(n)).join("|")})`;case"array":return`${f(e.itemType)}[]`;case"object":return`{${e.keyValuePairTypes.map(([n,t])=>`${n}: ${f(t)}`).join(", ")}}`;case"date":return"Date"}}function X(e,n){let t=`//
// ******* AUTOGENERATED BY ${s.toUpperCase()} *******
//

// Fetch + encoding helpers
function rpcFetch(t:string){return async(...e:any[])=>{let r=await(await fetch("${n}?"+t,{method:"POST",body:JSON.stringify({name:t,params:e.map(c)})})).json();return a(r)}}function c(t:any):any{return t instanceof Date?{v:t.toISOString(),t:"date"}:Array.isArray(t)?{v:t.map(e=>c(e))}:typeof t=="object"&&t!=null?{v:Object.entries(t).reduce((e,[n,r])=>({...e,[n]:c(r)}),{})}:{v:t}}function a(t:any):any{let e=t.v;return t.t==="date"&&typeof e=="string"?new Date(e):Array.isArray(e)?e.map(n=>a(n)):typeof e=="object"&&e!=null?Object.entries(e).reduce((n,[r,o])=>({...n,[r]:a(o)}),{}):e}

// Generated RPC methods

`;for(let i of e){let a=i.functionName,u=i.params.map(({name:h,type:Z})=>`${h}: ${f(Z)}`).join(", "),y=f(i.returnType);if(i.jsDoc){t+=`/**
`;for(let h of i.jsDoc.split(`
`))t+=`* ${h}
`;t+=`*/
`}t+=`export const ${a}:(${u}) => Promise<${y}> = rpcFetch("${a}");

`}return t}async function K(e){let n=!1;for(let t of e.clients)await oe(t)||(n=!0);return o(""),n?(o(""),o(`${r.FgRed}One or more clients failed to generate${r.Reset}`),x(),!1):!0}async function oe(e){let n=l(`Generating ${e.out} against ${e.url}...`),t=await w(e.url);if(!t)return n(!1,"failed"),!1;let i=X(t.schema,t.rpcPath);return(0,z.writeFileSync)(e.out,i),n(!0,"done"),!0}(0,Q.setDefaultResultOrder)("ipv4first");async function ie(){let e=process.argv.slice(2),n;try{n=G()}catch(t){o(`${r.FgRed}Failed to read config${r.Reset}`),o(t.message);return}if(e[0]==="create-server-project"){await q();return}if(e[0]==="add-client"){await T(n,e[1]);return}if(e[0]==="generate"){await K(n);return}se()}function se(){o(`${s} version ${F}`),o(""),c(`${s} add-client`),o(`  ${r.FgGray}Adds a client to the configuration file for generation${r.Reset}`),o(""),c(`${s} generate`),o(`  ${r.FgGray}Runs codegen for all clients in the configuration file${r.Reset}`),o(""),c(`${s} create-server-project`),o(`  ${r.FgGray}Creates and sets up a new backend ${s} project${r.Reset}`),o("")}ie();
